{"post":{"slug":"bash-helpers-for-quick-installs","id":"62890ee8c868ac020bd685b9","uuid":"8afef3b4-d17e-4271-8924-5668be3263e0","title":"Bash Helpers for Quick Installs","html":"<!--kg-card-begin: markdown--><h2 id=\"speed-up-software-installs-with-this-bash-trick\">Speed Up Software Installs with this Bash Trick</h2>\n<p>I've created a <code>bash</code> function that enables quick software installs without being as heavy as something like <code>ansible</code>. The system relies on a single function in my <code>bashrc</code> and a directory full of bash scripts. Let's dive in and see how it works.</p>\n<h3 id=\"installation-scripts\">Installation Scripts</h3>\n<p>In my dotfiles directory, which is stored at <code>~/dotfiles</code> there's a subdirectory called <code>install</code>. That directory contains a few dozen bash scripts that install the various software components and packages I might use. Some of them are needed on all the computers I use, some of them are used only infrequently for certain projects. Here's an example that installs Go:</p>\n<pre><code class=\"language-bash\">‚ùØ go.sh\n#! /bin/bash\nset -e\nVERSION=1.15\n# Delete existing Go installation\nsudo rm -rf /usr/local/go\n# Install Go in /usr/local\nsudo mkdir -p /usr/local/go &amp;&amp; curl -Ls https://storage.googleapis.com/golang/go$VERSION.linux-amd64.tar.gz | sudo tar xvzf - -C /usr/local/go --strip-components=1\n</code></pre>\n<p>The script declares a <code>VERSION</code> variable so I can change the version to be installed when there's a new release of Go. Then it deletes the existing Go installation and replaces it with a freshly downloaded version. Because it deletes the existing install and replaces it, it can be run more than once with no unwanted side-effects. I've attempted to make all my scripts idempotent like this, but some of them just aren't because my bash skills are just mediocre.</p>\n<h3 id=\"installation-function\">Installation Function</h3>\n<p>To use these installation scripts I've created a bash function that searches for scripts in the <code>~/dotfiles/install</code> folder matching the first argument of the function:</p>\n<pre><code class=\"language-bash\">inst() {\n\tif [ -f $HOME/dotfiles/install/$1.sh ] ; then\n\t\techo Installing $1\n\t\t. $HOME/dotfiles/install/$1.sh\n\telse\n\t\techo $1 not found\n\tfi\n}\n</code></pre>\n<p>To install Go using this function I would type <code>$&gt; inst go</code>, which would search for a script called <code>~/dotfiles/install/go.sh</code> and execute it if it exists. It's not complicated, and only took a few minutes to write the function, but I'm getting a lot of ROI on the time I spend writing installation scripts. When I spin up a new VM somewhere, I can quickly clone my dotfiles and install just the bits I need for a particular task.</p>\n<h3 id=\"direnv-integration\">Direnv integration</h3>\n<p>I've been playing with <code>direnv</code> integrations to make the installation of required tools or commands automatic when entering a project directory. I haven't found anything yet that doesn't feel too &quot;hacky&quot;, so I haven't finished this part.</p>\n<h2 id=\"future-ideas\">Future Ideas</h2>\n<p>In the future I may extend the script to search for installation scripts with an <code>arch</code> component in the file path, like <code>~/dotfiles/install/linux/go.sh</code> or <code>~/dotfiles/install/macos/go.sh</code>. I don't have a need for this right now because I'm not using my Mac for development work.</p>\n<p>I may also consider making <code>meta</code> scripts that call others. It might be similar to installing a Development metapackage, where the metapackage simply calls the other packages it wants to wrap.</p>\n<!--kg-card-end: markdown-->","comment_id":"62890ee8c868ac020bd685b9","feature_image":"https://brian.dev/content/images/2022/05/4pPzKfd6BEg.jpg","featured":false,"visibility":"public","email_recipient_filter":"none","created_at":"2022-05-21T12:10:16.000-04:00","updated_at":"2022-05-21T12:12:01.000-04:00","published_at":"2020-08-14T00:00:00.000-04:00","custom_excerpt":"This bash setup is the latest evolution of my quest to make a new system install as fast as possible.","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"tags":[{"id":"62889299a640e2020be86e4a","name":"Linux","slug":"linux","description":"Linux","feature_image":"https://brian.dev/content/images/2022/05/Bit_Linux.png","visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":"#012293","url":"https://brian.dev/tag/linux/"}],"authors":[{"id":"1","name":"Brian Ketelsen","slug":"brian","profile_image":"https://brian.dev/content/images/2022/05/logo-copy-1.png","cover_image":"https://brian.dev/content/images/2022/05/time-machine-1.jpg","bio":null,"website":null,"location":null,"facebook":null,"twitter":"@bketelsen","meta_title":null,"meta_description":null,"url":"https://brian.dev/author/brian/"}],"primary_author":{"id":"1","name":"Brian Ketelsen","slug":"brian","profile_image":"https://brian.dev/content/images/2022/05/logo-copy-1.png","cover_image":"https://brian.dev/content/images/2022/05/time-machine-1.jpg","bio":null,"website":null,"location":null,"facebook":null,"twitter":"@bketelsen","meta_title":null,"meta_description":null,"url":"https://brian.dev/author/brian/"},"primary_tag":{"id":"62889299a640e2020be86e4a","name":"Linux","slug":"linux","description":"Linux","feature_image":"https://brian.dev/content/images/2022/05/Bit_Linux.png","visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":"#012293","url":"https://brian.dev/tag/linux/"},"url":"https://brian.dev/bash-helpers-for-quick-installs/","excerpt":"This bash setup is the latest evolution of my quest to make a new system install as fast as possible.","reading_time":2,"access":true,"send_email_when_published":false,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"email_subject":null,"frontmatter":null}}