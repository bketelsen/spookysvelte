{"post":{"slug":"organizing-documents-with-some-ai-ml-and-elbow-grease","id":"62889299a640e2020be86e54","uuid":"88d47038-8508-483e-a9fa-9d720c4f0692","title":"Organizing Documents with Some AI, ML, and Elbow Grease","html":"<!--kg-card-begin: markdown--><p>In this first post of (likely) a multi-part series I'm going to discuss how I am using machine learning, AI, and good old-fashioned elbow grease to make sense of the 3000 files in my <code>~/Documents/Unfiled</code> directory.</p>\n<h3 id=\"the-problem-statement\">The Problem Statement</h3>\n<p>There are several contributing factors to the problem. Let's start with the obvious ones:</p>\n<ul>\n<li>I'm a digital packrat</li>\n<li>I'm a single parent of 3 (and therefore busy)</li>\n<li>I can be lazy sometimes</li>\n<li>I have ADHD, and get easily sidetracked from things I intended to do</li>\n</ul>\n<p>When my dad passed away last year, it got even worse. Suddenly I was getting all of his mail, bills, correspondence, too. I didn't want to lose it; but I sure wasn't ready to read it all. So I scanned it and dropped it in the <code>Unfiled</code> folder.</p>\n<p>So now we're here. Where <code>here</code> is a place where I can't find anything I need and my <code>Documents</code> directory is the definition of <code>hot-mess</code>.</p>\n<h3 id=\"the-goal\">The Goal</h3>\n<p>I'd like to take that folder of 3000 random unclassified documents and sort them into something more clear. I think sorting them by originating source (Supplier, Vendor, Biller, Organization) is a good first step. Eventually I'd like to sort them by date group too. Probably by Year, then Month.</p>\n<p>For a bonus, I'd love to do a <a href=\"https://docs.microsoft.com/en-us/windows/win32/projfs/projected-file-system?WT.mc_id=none-twitter-brketels\">projected filesystem</a> sort of thing in Windows and a <a href=\"https://9p.io/wiki/plan9/Installing_a_Plan_9_File_Server/index.html\">Plan9</a> type server on Mac/Linux using FUSE. It'd be really convenient to be able to get at documents from a Filesystem interface by using different facets like keywords, dates, categories, etc. That might fit more cleanly with the way I think, too. But, again, that's a stretch goal, because we'll need all that metadata first.</p>\n<p>If you're old enough to remember <a href=\"https://arstechnica.com/information-technology/2018/07/the-beos-filesystem/\">BeOS Filesystem</a>, it would have solved nearly all of this. Someday we'll get back to the database/filesystem mashup that truly needs to exist.</p>\n<h3 id=\"the-solutions\">The Solution(s)</h3>\n<p>First, there isn't really a one-step solution to this. It's going to take some work, and I can likely automate MOST of that. But there will still be a good portion of things I can't sort automatically.</p>\n<h4 id=\"step-one\">Step One</h4>\n<p>As a first step, I wrote a small Go program that calls <a href=\"https://cda.ms/126\">Azure Cognitive Services</a> Vision API to do Optical Character Recognition on all the files that are compatible (PDF and image files). Nearly everything I have is in pdf format, but there are a few TIFF files in there too. This program is in flux right now, so I'm not going to release it as Open Source until it's settled a bit. If I forget - ping me on twitter @bketelsen or email mail@bjk.fyi - and remind me! Related: the code samples in this post are probably garbage, and won't likely match the end result that I publish. I'm sure I'm swallowing errors, and haven't done the slightest bit of refactor/cleanup on this code yet.</p>\n<blockquote>\n<p>WARNING: <em>Don't cut/paste this code yet, please.</em></p>\n</blockquote>\n<p>I created a domain type appropriately called <code>Document</code> that stores metadata about files on disk:</p>\n<pre><code class=\"language-go\">type Document struct {\n\tHash         string\n\tPath         string\n\tPreviousPath string\n\tOperation    *CognitiveOperation\n\tResults      *CognitiveReadResponse\n}\n</code></pre>\n<p>I'll discuss the fields as they come up, but <code>Path</code> and <code>PreviousPath</code> should be obvious. Current and previous location on disk, so that I can account for file moves with at least a little bit of history.</p>\n<p>The pricing for the OCR is really attractive - as of September, 2019 it is:</p>\n<blockquote>\n<p>0-1M transactions â€” $1.50 per 1,000 transactions</p>\n</blockquote>\n<p>I know that I'll be fine tuning the processes that run, and likely running them repeatedly. I wanted to find a way to store the results from the OCR for each document, but I am also aware that I can't use the document name and path as the canonical key to find the document later, because the goal of this app is to move them and rename them appropriately! So I decided to use a hash of the file contents as a key. <code>SHA256</code> seems to be the right algorithm for file contents, low cost computation, low collision chance. So I created a hash function that calculates the <code>SHA256</code> hash of the document after it is read:</p>\n<pre><code class=\"language-go\">func (d *Document) GetHash() {\n\n\tf, err := os.Open(d.Path)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer f.Close()\n\n\th := sha256.New()\n\tif _, err := io.Copy(h, f); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\td.Hash = fmt.Sprintf(&quot;%x&quot;, h.Sum(nil))\n}\n</code></pre>\n<p>After getting the results of the OCR operation, I set them in the <code>Document</code> type, then persist the metadata to disk in a hidden directory. Currently that's <code>~/.classifier/</code> but, as with all of this, it might change in the future.</p>\n<p>The file is stored using the <code>SHA256</code> hash of the contents as the file name, and the <code>Document</code> type is serialized to disk using Go's efficient and lightweight <code>encoding/gob</code> format. While I'm debugging and playing with this code, I decided to also persist the data in <code>json</code> format so it's easier to read. Here's the method on <code>Document</code> that saves/serializes to disk:</p>\n<pre><code class=\"language-go\">func (d *Document) SaveMetadata() error {\n  fmt.Println(d.Hash)\n  //TODO use new XDG config dir location\n  // https://tip.golang.org/pkg/os/#UserConfigDir\n\tfilePath := &quot;/home/bjk/.classifier/&quot; + d.Hash // TODO FILEPATH.JOIN\n\tfmt.Println(filePath)\n\tfile, err := os.OpenFile(filePath, os.O_TRUNC|os.O_CREATE|os.O_WRONLY, 0644)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\tenc := gob.NewEncoder(file)\n\terr = enc.Encode(d)\n\tif err != nil {\n\t\treturn err\n\t}\n\tjfilePath := &quot;/home/bjk/.classifier/&quot; + d.Hash + &quot;.json&quot; // TODO FILEPATH.JOIN\n\tfmt.Println(jfilePath)\n\tjfile, err := os.OpenFile(jfilePath, os.O_TRUNC|os.O_CREATE|os.O_WRONLY, 0644)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer jfile.Close()\n\tjenc := json.NewEncoder(jfile)\n\treturn jenc.Encode(d)\n}\n</code></pre>\n<p>Lots of bad things happening in there, see above caveats about copying/pasting this code. The important part is the encoding in <code>gob</code> format of the contents of the <code>Document</code> metadata, which is then saved to disk using the <code>SHA256</code> hash as the filename. This is a nice future-proof solution, and provides several benefits.</p>\n<ul>\n<li>If there is already a file with the same name, it's been processed once.</li>\n<li>If the <code>.Path</code> is different from the document I'm inspecting, I might have an exact duplicate, which is a candidate for (soft) deleting</li>\n<li>It doesn't matter where the files get moved, as long as the <code>SHA256</code> hash matches, I've got the metadata saved already.</li>\n</ul>\n<p>This is a very low-tech metadata database, of sorts. It's definitely not optimized for real-time use, but instead for batch operations.</p>\n<p>Keeping all the metadata in this format means I can write any number of other tools to read and modify the metadata without worrying too much.</p>\n<h3 id=\"step-two\">Step Two</h3>\n<p>At this point, I have a directory full of unprocessed files and a way to process them once and save the results so I don't have to re-process them later. It's time to fire off the processing app. I used <a href=\"https://github.com/spf13/cobra\">cobra</a> to build the command-line utility, so I made the root/naked command do the actual calls to Azure Cognitive Services:</p>\n<pre><code class=\"language-bash\">go build\n./classifier\n</code></pre>\n<p>This iterates over every file in the <code>~/Documents/Unfiled</code> directory, calling Cognitive Services OCR for the file types that are supported. There is no current mechanism to retrieve metadata from other document types (Word documents, text files, etc). That's a future addition.</p>\n<p>After receiving the results, the responses are serialized using the above mentioned <code>gob</code> serialization into <code>~/.classifier/HASH</code></p>\n<h3 id=\"classification\">Classification</h3>\n<p>Based on the results there are some simple <code>bag of words</code> matches that can be done. Some of the documents I have contain very unique text that is indicative of a particular document type. For example, Bank of America always includes my account number and their address in <code>Wilmington</code>. No other document in my corpus has those two distinct things together, so I can write a simple classifier for all Bank of America documents. I decided to use simple TOML for a configuration file here:</p>\n<pre><code>[[entity]]\nname = &quot;Bank of America&quot;\ndirectory = &quot;BOA&quot;\nkeywords = [&quot;Bank of America&quot;,&quot;12345677889&quot;,&quot;Wilmington&quot;]\n</code></pre>\n<p>Here, I added a sub-command in <code>cobra</code> so I can classify files without re-posting them to Cognitive Services. So I added the <code>classifier process</code> command:</p>\n<pre><code class=\"language-bash\">./classifier process\n</code></pre>\n<p>It currently goes through all the files in <code>Unfiled</code> and checks their metadata for matches against the TOML file. This worked perfectly for several of my external correspondents. It took all the documents from <code>Unfiled</code> and placed them in <code>Filed/{directory}</code>.</p>\n<h3 id=\"what-about-the-rest\">What About The Rest?</h3>\n<p>There are many documents that aren't easily processed this way though. My next inspiration came in the shower (of course). If you squint enough, or are far enough away, all documents from the same entity of the same type look the same. So all my mortgage statements look the same, but the numbers are different.</p>\n<p>I installed ImageMagick, and wrote a script to make a low-resolution thumbnail of each PDF. I made the resolution low enough that the text isn't readable even if you magnify the image.</p>\n<p>Then I searched for ways to compare images and came across <a href=\"https://github.com/rivo/duplo\">duplo</a>, which appears to do what I need. It does a hash of the image and allows you to compare other documents to that hash to find a similarity score. Using this type of process my next goal is to group similar documents together by searching for ones with matching or close-to-matching image hashes.</p>\n<p>But that'll be probably next weekend. It's been really fun doing this much, and I'm looking forward to seeing how much more I can learn as I go!</p>\n<p>Intermediate results:</p>\n<p>Before:</p>\n<pre><code class=\"language-bash\">2846 Files\n</code></pre>\n<p>After:</p>\n<pre><code class=\"language-bash\">Unfiled\\\n  2710 Files\nFiled\\\n  136 Files in 2 Directories\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"6282b1f8531f79020b2ba215","feature_image":"https://brian.dev/content/images/2022/05/IGa3Md8wP6g.jpg","featured":false,"visibility":"public","email_recipient_filter":"none","created_at":"2022-05-16T16:20:08.000-04:00","updated_at":"2022-05-16T16:22:43.000-04:00","published_at":"2019-09-03T16:20:00.000-04:00","custom_excerpt":"In this first post of (likely) a multi-part series I'm going to discuss how I am using machine learning, AI, and good old-fashioned elbow grease to make sense of the 3000 files in my `~/Documents/Unfiled` directory.","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"tags":[{"id":"62889299a640e2020be86e48","name":"AI/ML","slug":"ai-ml","description":"AI and Machine Learning","feature_image":"https://brian.dev/content/images/2022/05/bit_ai.png","visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":"#2DA140","url":"https://brian.dev/tag/ai-ml/"},{"id":"62889299a640e2020be86e49","name":"Go","slug":"go","description":"The Go Programming Language","feature_image":"https://brian.dev/content/images/2022/05/GO_BUILD.png","visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":"#40e6f2","url":"https://brian.dev/tag/go/"}],"authors":[{"id":"1","name":"Brian Ketelsen","slug":"brian","profile_image":"https://brian.dev/content/images/2022/05/logo-copy-1.png","cover_image":"https://brian.dev/content/images/2022/05/time-machine-1.jpg","bio":null,"website":null,"location":null,"facebook":null,"twitter":"@bketelsen","meta_title":null,"meta_description":null,"url":"https://brian.dev/author/brian/"}],"primary_author":{"id":"1","name":"Brian Ketelsen","slug":"brian","profile_image":"https://brian.dev/content/images/2022/05/logo-copy-1.png","cover_image":"https://brian.dev/content/images/2022/05/time-machine-1.jpg","bio":null,"website":null,"location":null,"facebook":null,"twitter":"@bketelsen","meta_title":null,"meta_description":null,"url":"https://brian.dev/author/brian/"},"primary_tag":{"id":"62889299a640e2020be86e48","name":"AI/ML","slug":"ai-ml","description":"AI and Machine Learning","feature_image":"https://brian.dev/content/images/2022/05/bit_ai.png","visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":"#2DA140","url":"https://brian.dev/tag/ai-ml/"},"url":"https://brian.dev/organizing-documents-with-some-ai-ml-and-elbow-grease/","excerpt":"In this first post of (likely) a multi-part series I'm going to discuss how I am using machine learning, AI, and good old-fashioned elbow grease to make sense of the 3000 files in my `~/Documents/Unfiled` directory.","reading_time":6,"access":true,"send_email_when_published":false,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"email_subject":null,"frontmatter":null}}